# - Overview of R packages used

This section aim to introduce brively which R packages environment we will use. Since several years, the R communities evolve in many interesting ways and today if you want to write your own package there are a lot of support that you can find.

::::: columns
::: {.column width="25%"}
![](../images/logo_tidyverse.png){fig-align="center"}
:::

::: {.column width="75%"}
First of all, it's difficult to talk about package whithout talk about the [tidyverse](https://www.tidyverse.org/){.external target="_blank"} approach. Tidyverse is a [collection of R packages](https://www.tidyverse.org/packages/){.external target="_blank"} designed for data science. They share an underlying design philosophy, grammar, and data structures. If you use R, it's allmost sure that you have allready use this kind of packages, maybe even without knowing them. Even if there are none mandatary for R use, theses packages bring a lot of benefices and at the end make data science easier, faster, and more fun (yes, you will see).
:::
:::::

So far we don't go deeper into all the useful R packages of the tidyverse collection, but only focusing on theses related to the R packages developement.

::::: columns
::: {.column width="15%"}
![](../images/logo_devtools.png){width="50%" fig-align="center"}
:::

::: {.column width="85%"}
The first one is called [devtools](https://devtools.r-lib.org/){.external target="_blank"} @devtools. The aim of this package is to make R package development easier by providing R functions that simplify and expedite common tasks. In practical, if you use the Rstudio IDE you will not interact directly with this package because the majority of common processes will be integrated automatically in the Rstudio environment and become "click button" processes.
:::
:::::

::::: columns
::: {.column width="15%"}
![](../images/logo_usethis.png){width="40%" fig-align="center"}
:::

::: {.column width="85%"}
The second one is the sub-package you are most likely to interact with directly. It be called [usethis](https://usethis.r-lib.org/){.external target="_blank"} @usethis and is aim is to automates repetitive tasks that arise during project setup and development. The idea is to, if it's possible, use functions available by the package, rather that modify directely the code, to reduce error and be sure to have the last version of process strucutre.
:::
:::::

::::: columns
::: {.column width="15%"}
![](../images/logo_roxygen2.png){width="45%" fig-align="center"}

![](../images/logo_pkgdown.png){width="45%" fig-align="center"}
:::

::: {.column width="85%"}
There are two more important packages related to design of the documentation: [roxygen2](https://roxygen2.r-lib.org/){.external target="_blank"} @roxygen2 and [pkgdown](https://pkgdown.r-lib.org/){.external target="_blank"} @pkgdown. With the first one throught the use of tags, the code and the documentation are adjacent and dynamically inspects the objects that itâ€™s documenting. We will go back to them into the following sections but keep in your mind that theses two tools simplify and automate the documentation creation and evolution.
:::
:::::

::::: columns
::: {.column width="15%"}
![](../images/logo_testthat.png){width="45%" fig-align="center"}
:::

::: {.column width="85%"}
The last one is called [testthat](https://testthat.r-lib.org/){.external target="_blank"} @testthat and focusing on the field of testing your code, which can be painful and tedious, but it greatly increases the quality of your code.
:::
:::::

In addition we will use or talk about several other packages, for example [lintr](https://lintr.r-lib.org/){.external target="_blank"} @lintr or [renv](https://rstudio.github.io/renv/){.external target="_blank"} @renv, but it's more a case-by-case utilisation and we will discuss them when the time comes.
